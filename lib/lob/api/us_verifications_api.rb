=begin
#Lob

#The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

The version of the OpenAPI document: 1.3.0
Contact: lob-openapi@lob.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'cgi'

module Lob
  class UsVerificationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # verifyBulk
    # Verify a list of US or US territory addresses with a live API key.
    # @param multiple_components_list [MultipleComponentsList] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_case Casing of the verified address. Possible values are &#x60;upper&#x60; and &#x60;proper&#x60; for uppercased (e.g. \&quot;PO BOX\&quot;) and proper-cased (e.g. \&quot;PO Box\&quot;), respectively. (default to 'upper')
    # @return [UsVerifications]
    def verifyBulk(multiple_components_list, opts = {})
      data, _status_code, _headers = bulk_us_verifications_with_http_info(multiple_components_list, opts)
      data
    end

    # verifyBulk
    # Verify a list of US or US territory addresses with a live API key.
    # @param multiple_components_list [MultipleComponentsList] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_case Casing of the verified address. Possible values are &#x60;upper&#x60; and &#x60;proper&#x60; for uppercased (e.g. \&quot;PO BOX\&quot;) and proper-cased (e.g. \&quot;PO Box\&quot;), respectively. (default to 'upper')
    # @return [Array<(UsVerifications, Integer, Hash)>] UsVerifications data, response status code and response headers
    def bulk_us_verifications_with_http_info(multiple_components_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsVerificationsApi.bulk_us_verifications ...'
      end
      # verify the required parameter 'multiple_components_list' is set
      if @api_client.config.client_side_validation && multiple_components_list.nil?
        fail ArgumentError, "Missing the required parameter 'multiple_components_list' when calling UsVerificationsApi.bulk_us_verifications"
      end
      allowable_values = ["upper", "proper"]
      if @api_client.config.client_side_validation && opts[:'_case'] && !allowable_values.include?(opts[:'_case'])
        fail ArgumentError, "invalid value for \"_case\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/bulk/us_verifications'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'case'] = opts[:'_case'] if !opts[:'_case'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(multiple_components_list)

      # return_type
      return_type = opts[:debug_return_type] || 'UsVerifications'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"UsVerificationsApi.bulk_us_verifications",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsVerificationsApi#bulk_us_verifications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # verifySingle
    # Verify a US or US territory address with a live API key.
    # @param us_verifications_writable [UsVerificationsWritable] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_case Casing of the verified address. Possible values are &#x60;upper&#x60; and &#x60;proper&#x60; for uppercased (e.g. \&quot;PO BOX\&quot;) and proper-cased (e.g. \&quot;PO Box\&quot;), respectively. (default to 'upper')
    # @return [UsVerification]
    def verifySingle(us_verifications_writable, opts = {})
      data, _status_code, _headers = us_verification_with_http_info(us_verifications_writable, opts)
      data
    end

    # verifySingle
    # Verify a US or US territory address with a live API key.
    # @param us_verifications_writable [UsVerificationsWritable] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :_case Casing of the verified address. Possible values are &#x60;upper&#x60; and &#x60;proper&#x60; for uppercased (e.g. \&quot;PO BOX\&quot;) and proper-cased (e.g. \&quot;PO Box\&quot;), respectively. (default to 'upper')
    # @return [Array<(UsVerification, Integer, Hash)>] UsVerification data, response status code and response headers
    def us_verification_with_http_info(us_verifications_writable, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsVerificationsApi.us_verification ...'
      end
      # verify the required parameter 'us_verifications_writable' is set
      if @api_client.config.client_side_validation && us_verifications_writable.nil?
        fail ArgumentError, "Missing the required parameter 'us_verifications_writable' when calling UsVerificationsApi.us_verification"
      end
      allowable_values = ["upper", "proper"]
      if @api_client.config.client_side_validation && opts[:'_case'] && !allowable_values.include?(opts[:'_case'])
        fail ArgumentError, "invalid value for \"_case\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/us_verifications'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'case'] = opts[:'_case'] if !opts[:'_case'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(us_verifications_writable)

      # return_type
      return_type = opts[:debug_return_type] || 'UsVerification'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"UsVerificationsApi.us_verification",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsVerificationsApi#us_verification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
