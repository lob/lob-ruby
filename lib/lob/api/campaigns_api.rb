=begin
#Lob

#The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

The version of the OpenAPI document: 1.3.0
Contact: lob-openapi@lob.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'cgi'

module Lob
  class CampaignsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # create
    # Creates a new campaign with the provided properties. See how to launch your first campaign [here](https://help.lob.com/best-practices/launching-your-first-campaign).
    # @param campaign_writable [CampaignWritable] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_lang_output * &#x60;native&#x60; - Translate response to the native language of the country in the request * &#x60;match&#x60; - match the response to the language in the request  Default response is in English. 
    # @return [Campaign]
    def create(campaign_writable, opts = {})
      data, _status_code, _headers = campaign_create_with_http_info(campaign_writable, opts)
      data
    end

    # create
    # Creates a new campaign with the provided properties. See how to launch your first campaign [here](https://help.lob.com/best-practices/launching-your-first-campaign).
    # @param campaign_writable [CampaignWritable] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_lang_output * &#x60;native&#x60; - Translate response to the native language of the country in the request * &#x60;match&#x60; - match the response to the language in the request  Default response is in English. 
    # @return [Array<(Campaign, Integer, Hash)>] Campaign data, response status code and response headers
    def campaign_create_with_http_info(campaign_writable, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CampaignsApi.campaign_create ...'
      end
      # verify the required parameter 'campaign_writable' is set
      if @api_client.config.client_side_validation && campaign_writable.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_writable' when calling CampaignsApi.campaign_create"
      end
      allowable_values = ["native", "match"]
      if @api_client.config.client_side_validation && opts[:'x_lang_output'] && !allowable_values.include?(opts[:'x_lang_output'])
        fail ArgumentError, "invalid value for \"x_lang_output\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/campaigns'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'x-lang-output'] = opts[:'x_lang_output'] if !opts[:'x_lang_output'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(campaign_writable)

      # return_type
      return_type = opts[:debug_return_type] || 'Campaign'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CampaignsApi.campaign_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#campaign_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # delete
    # Delete an existing campaign. You need only supply the unique identifier that was returned upon campaign creation. Deleting a campaign also deletes any associated mail pieces that have been created but not sent. A campaign's `send_date` matches its associated mail pieces' `send_date`s.
    # @param cmp_id [String] id of the campaign
    # @param [Hash] opts the optional parameters
    # @return [CampaignDeletion]
    def delete(cmp_id, opts = {})
      data, _status_code, _headers = campaign_delete_with_http_info(cmp_id, opts)
      data
    end

    # delete
    # Delete an existing campaign. You need only supply the unique identifier that was returned upon campaign creation. Deleting a campaign also deletes any associated mail pieces that have been created but not sent. A campaign&#39;s &#x60;send_date&#x60; matches its associated mail pieces&#39; &#x60;send_date&#x60;s.
    # @param cmp_id [String] id of the campaign
    # @param [Hash] opts the optional parameters
    # @return [Array<(CampaignDeletion, Integer, Hash)>] CampaignDeletion data, response status code and response headers
    def campaign_delete_with_http_info(cmp_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CampaignsApi.campaign_delete ...'
      end
      # verify the required parameter 'cmp_id' is set
      if @api_client.config.client_side_validation && cmp_id.nil?
        fail ArgumentError, "Missing the required parameter 'cmp_id' when calling CampaignsApi.campaign_delete"
      end
      pattern = Regexp.new(/^cmp_[a-zA-Z0-9]+$/)
      if @api_client.config.client_side_validation && cmp_id !~ pattern
        fail ArgumentError, "invalid value for 'cmp_id' when calling CampaignsApi.campaign_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/campaigns/{cmp_id}'.sub('{' + 'cmp_id' + '}', CGI.escape(cmp_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CampaignDeletion'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CampaignsApi.campaign_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#campaign_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get
    # Retrieves the details of an existing campaign. You need only supply the unique campaign identifier that was returned upon campaign creation.
    # @param cmp_id [String] id of the campaign
    # @param [Hash] opts the optional parameters
    # @return [Campaign]
    def get(cmp_id, opts = {})
      data, _status_code, _headers = campaign_retrieve_with_http_info(cmp_id, opts)
      data
    end

    # get
    # Retrieves the details of an existing campaign. You need only supply the unique campaign identifier that was returned upon campaign creation.
    # @param cmp_id [String] id of the campaign
    # @param [Hash] opts the optional parameters
    # @return [Array<(Campaign, Integer, Hash)>] Campaign data, response status code and response headers
    def campaign_retrieve_with_http_info(cmp_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CampaignsApi.campaign_retrieve ...'
      end
      # verify the required parameter 'cmp_id' is set
      if @api_client.config.client_side_validation && cmp_id.nil?
        fail ArgumentError, "Missing the required parameter 'cmp_id' when calling CampaignsApi.campaign_retrieve"
      end
      pattern = Regexp.new(/^cmp_[a-zA-Z0-9]+$/)
      if @api_client.config.client_side_validation && cmp_id !~ pattern
        fail ArgumentError, "invalid value for 'cmp_id' when calling CampaignsApi.campaign_retrieve, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/campaigns/{cmp_id}'.sub('{' + 'cmp_id' + '}', CGI.escape(cmp_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Campaign'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CampaignsApi.campaign_retrieve",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#campaign_retrieve\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update
    # Update the details of an existing campaign. You need only supply the unique identifier that was returned upon campaign creation.
    # @param cmp_id [String] id of the campaign
    # @param campaign_updatable [CampaignUpdatable] 
    # @param [Hash] opts the optional parameters
    # @return [Campaign]
    def update(cmp_id, campaign_updatable, opts = {})
      data, _status_code, _headers = campaign_update_with_http_info(cmp_id, campaign_updatable, opts)
      data
    end

    # update
    # Update the details of an existing campaign. You need only supply the unique identifier that was returned upon campaign creation.
    # @param cmp_id [String] id of the campaign
    # @param campaign_updatable [CampaignUpdatable] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Campaign, Integer, Hash)>] Campaign data, response status code and response headers
    def campaign_update_with_http_info(cmp_id, campaign_updatable, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CampaignsApi.campaign_update ...'
      end
      # verify the required parameter 'cmp_id' is set
      if @api_client.config.client_side_validation && cmp_id.nil?
        fail ArgumentError, "Missing the required parameter 'cmp_id' when calling CampaignsApi.campaign_update"
      end
      pattern = Regexp.new(/^cmp_[a-zA-Z0-9]+$/)
      if @api_client.config.client_side_validation && cmp_id !~ pattern
        fail ArgumentError, "invalid value for 'cmp_id' when calling CampaignsApi.campaign_update, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'campaign_updatable' is set
      if @api_client.config.client_side_validation && campaign_updatable.nil?
        fail ArgumentError, "Missing the required parameter 'campaign_updatable' when calling CampaignsApi.campaign_update"
      end
      # resource path
      local_var_path = '/campaigns/{cmp_id}'.sub('{' + 'cmp_id' + '}', CGI.escape(cmp_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(campaign_updatable)

      # return_type
      return_type = opts[:debug_return_type] || 'Campaign'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CampaignsApi.campaign_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#campaign_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # list
    # Returns a list of your campaigns. The campaigns are returned sorted by creation date, with the most recently created campaigns appearing first.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many results to return. (default to 10)
    # @option opts [Array<String>] :include Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;. 
    # @option opts [String] :before A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response. 
    # @option opts [String] :after A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response. 
    # @return [CampaignsList]
    def list(opts = {})
      data, _status_code, _headers = campaigns_list_with_http_info(opts)
      data
    end

    # list
    # Returns a list of your campaigns. The campaigns are returned sorted by creation date, with the most recently created campaigns appearing first.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many results to return. (default to 10)
    # @option opts [Array<String>] :include Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;. 
    # @option opts [String] :before A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response. 
    # @option opts [String] :after A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response. 
    # @return [Array<(CampaignsList, Integer, Hash)>] CampaignsList data, response status code and response headers
    def campaigns_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CampaignsApi.campaigns_list ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling CampaignsApi.campaigns_list, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling CampaignsApi.campaigns_list, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/campaigns'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'include'] = @api_client.build_collection_param(opts[:'include'], :multi) if !opts[:'include'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CampaignsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CampaignsApi.campaigns_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CampaignsApi#campaigns_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
