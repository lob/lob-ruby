=begin
#Lob

#The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

The version of the OpenAPI document: 1.3.0
Contact: lob-openapi@lob.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'cgi'

module Lob
  class TemplatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # create
    # Creates a new template for use with the Print & Mail API. In Live mode, you can only have as many non-deleted templates as allotted in your current [Print & Mail Edition](https://dashboard.lob.com/#/settings/editions). If you attempt to create a template past your limit, you will receive a `403` error. There is no limit in Test mode.
    # @param template_writable [TemplateWritable] 
    # @param [Hash] opts the optional parameters
    # @return [Template]
    def create(template_writable, opts = {})
      data, _status_code, _headers = create_template_with_http_info(template_writable, opts)
      data
    end

    # create
    # Creates a new template for use with the Print &amp; Mail API. In Live mode, you can only have as many non-deleted templates as allotted in your current [Print &amp; Mail Edition](https://dashboard.lob.com/#/settings/editions). If you attempt to create a template past your limit, you will receive a &#x60;403&#x60; error. There is no limit in Test mode.
    # @param template_writable [TemplateWritable] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Template, Integer, Hash)>] Template data, response status code and response headers
    def create_template_with_http_info(template_writable, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.create_template ...'
      end
      # verify the required parameter 'template_writable' is set
      if @api_client.config.client_side_validation && template_writable.nil?
        fail ArgumentError, "Missing the required parameter 'template_writable' when calling TemplatesApi.create_template"
      end
      # resource path
      local_var_path = '/templates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(template_writable)

      # return_type
      return_type = opts[:debug_return_type] || 'Template'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TemplatesApi.create_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#create_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # delete
    # Permanently deletes a template.
    # @param tmpl_id [String] id of the template
    # @param [Hash] opts the optional parameters
    # @return [TemplateDeletion]
    def delete(tmpl_id, opts = {})
      data, _status_code, _headers = template_delete_with_http_info(tmpl_id, opts)
      data
    end

    # delete
    # Permanently deletes a template.
    # @param tmpl_id [String] id of the template
    # @param [Hash] opts the optional parameters
    # @return [Array<(TemplateDeletion, Integer, Hash)>] TemplateDeletion data, response status code and response headers
    def template_delete_with_http_info(tmpl_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.template_delete ...'
      end
      # verify the required parameter 'tmpl_id' is set
      if @api_client.config.client_side_validation && tmpl_id.nil?
        fail ArgumentError, "Missing the required parameter 'tmpl_id' when calling TemplatesApi.template_delete"
      end
      pattern = Regexp.new(/^tmpl_[a-zA-Z0-9]+$/)
      if @api_client.config.client_side_validation && tmpl_id !~ pattern
        fail ArgumentError, "invalid value for 'tmpl_id' when calling TemplatesApi.template_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/templates/{tmpl_id}'.sub('{' + 'tmpl_id' + '}', CGI.escape(tmpl_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TemplateDeletion'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TemplatesApi.template_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#template_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get
    # Retrieves the details of an existing template.
    # @param tmpl_id [String] id of the template
    # @param [Hash] opts the optional parameters
    # @return [Template]
    def get(tmpl_id, opts = {})
      data, _status_code, _headers = template_retrieve_with_http_info(tmpl_id, opts)
      data
    end

    # get
    # Retrieves the details of an existing template.
    # @param tmpl_id [String] id of the template
    # @param [Hash] opts the optional parameters
    # @return [Array<(Template, Integer, Hash)>] Template data, response status code and response headers
    def template_retrieve_with_http_info(tmpl_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.template_retrieve ...'
      end
      # verify the required parameter 'tmpl_id' is set
      if @api_client.config.client_side_validation && tmpl_id.nil?
        fail ArgumentError, "Missing the required parameter 'tmpl_id' when calling TemplatesApi.template_retrieve"
      end
      pattern = Regexp.new(/^tmpl_[a-zA-Z0-9]+$/)
      if @api_client.config.client_side_validation && tmpl_id !~ pattern
        fail ArgumentError, "invalid value for 'tmpl_id' when calling TemplatesApi.template_retrieve, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/templates/{tmpl_id}'.sub('{' + 'tmpl_id' + '}', CGI.escape(tmpl_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Template'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TemplatesApi.template_retrieve",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#template_retrieve\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update
    # Updates the description and/or published version of the template with the given id.
    # @param tmpl_id [String] id of the template
    # @param template_update [TemplateUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Template]
    def update(tmpl_id, template_update, opts = {})
      data, _status_code, _headers = template_update_with_http_info(tmpl_id, template_update, opts)
      data
    end

    # update
    # Updates the description and/or published version of the template with the given id.
    # @param tmpl_id [String] id of the template
    # @param template_update [TemplateUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Template, Integer, Hash)>] Template data, response status code and response headers
    def template_update_with_http_info(tmpl_id, template_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.template_update ...'
      end
      # verify the required parameter 'tmpl_id' is set
      if @api_client.config.client_side_validation && tmpl_id.nil?
        fail ArgumentError, "Missing the required parameter 'tmpl_id' when calling TemplatesApi.template_update"
      end
      pattern = Regexp.new(/^tmpl_[a-zA-Z0-9]+$/)
      if @api_client.config.client_side_validation && tmpl_id !~ pattern
        fail ArgumentError, "invalid value for 'tmpl_id' when calling TemplatesApi.template_update, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'template_update' is set
      if @api_client.config.client_side_validation && template_update.nil?
        fail ArgumentError, "Missing the required parameter 'template_update' when calling TemplatesApi.template_update"
      end
      # resource path
      local_var_path = '/templates/{tmpl_id}'.sub('{' + 'tmpl_id' + '}', CGI.escape(tmpl_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(template_update)

      # return_type
      return_type = opts[:debug_return_type] || 'Template'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TemplatesApi.template_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#template_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # list
    # Returns a list of your templates. The templates are returned sorted by creation date, with the most recently created templates appearing first.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many results to return. (default to 10)
    # @option opts [String] :before A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response. 
    # @option opts [String] :after A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response. 
    # @option opts [Array<String>] :include Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;. 
    # @option opts [Hash<String, Time>] :date_created Filter by date created.
    # @option opts [Hash<String, String>] :metadata Filter by metadata key-value pair&#x60;.
    # @return [TemplateList]
    def list(opts = {})
      data, _status_code, _headers = templates_list_with_http_info(opts)
      data
    end

    # list
    # Returns a list of your templates. The templates are returned sorted by creation date, with the most recently created templates appearing first.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many results to return. (default to 10)
    # @option opts [String] :before A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response. 
    # @option opts [String] :after A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response. 
    # @option opts [Array<String>] :include Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;. 
    # @option opts [Hash<String, Time>] :date_created Filter by date created.
    # @option opts [Hash<String, String>] :metadata Filter by metadata key-value pair&#x60;.
    # @return [Array<(TemplateList, Integer, Hash)>] TemplateList data, response status code and response headers
    def templates_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.templates_list ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling TemplatesApi.templates_list, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling TemplatesApi.templates_list, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'metadata'].nil? && opts[:'metadata'].to_s.length > 500
        fail ArgumentError, 'invalid value for "opts[:"metadata"]" when calling TemplatesApi.templates_list, the character length must be smaller than or equal to 500.'
      end

      pattern = Regexp.new(/[^"\\]{0,500}/)
      if @api_client.config.client_side_validation && !opts[:'metadata'].nil? && opts[:'metadata'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"metadata\"]' when calling TemplatesApi.templates_list, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/templates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'include'] = @api_client.build_collection_param(opts[:'include'], :multi) if !opts[:'include'].nil?
      query_params[:'date_created'] = opts[:'date_created'] if !opts[:'date_created'].nil?
      query_params[:'metadata'] = opts[:'metadata'] if !opts[:'metadata'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TemplateList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TemplatesApi.templates_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#templates_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
