=begin
#Lob

#The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

The version of the OpenAPI document: 1.3.0
Contact: lob-openapi@lob.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'cgi'

module Lob
  class BillingGroupsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # create
    # Creates a new billing_group with the provided properties.
    # @param billing_group_editable [BillingGroupEditable] 
    # @param [Hash] opts the optional parameters
    # @return [BillingGroup]
    def create(billing_group_editable, opts = {})
      data, _status_code, _headers = billing_group_create_with_http_info(billing_group_editable, opts)
      data
    end

    # create
    # Creates a new billing_group with the provided properties.
    # @param billing_group_editable [BillingGroupEditable] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillingGroup, Integer, Hash)>] BillingGroup data, response status code and response headers
    def billing_group_create_with_http_info(billing_group_editable, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingGroupsApi.billing_group_create ...'
      end
      # verify the required parameter 'billing_group_editable' is set
      if @api_client.config.client_side_validation && billing_group_editable.nil?
        fail ArgumentError, "Missing the required parameter 'billing_group_editable' when calling BillingGroupsApi.billing_group_create"
      end
      # resource path
      local_var_path = '/billing_groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(billing_group_editable)

      # return_type
      return_type = opts[:debug_return_type] || 'BillingGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"BillingGroupsApi.billing_group_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingGroupsApi#billing_group_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get
    # Retrieves the details of an existing billing_group. You need only supply the unique billing_group identifier that was returned upon billing_group creation.
    # @param bg_id [String] id of the billing_group
    # @param [Hash] opts the optional parameters
    # @return [BillingGroup]
    def get(bg_id, opts = {})
      data, _status_code, _headers = billing_group_retrieve_with_http_info(bg_id, opts)
      data
    end

    # get
    # Retrieves the details of an existing billing_group. You need only supply the unique billing_group identifier that was returned upon billing_group creation.
    # @param bg_id [String] id of the billing_group
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillingGroup, Integer, Hash)>] BillingGroup data, response status code and response headers
    def billing_group_retrieve_with_http_info(bg_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingGroupsApi.billing_group_retrieve ...'
      end
      # verify the required parameter 'bg_id' is set
      if @api_client.config.client_side_validation && bg_id.nil?
        fail ArgumentError, "Missing the required parameter 'bg_id' when calling BillingGroupsApi.billing_group_retrieve"
      end
      pattern = Regexp.new(/^bg_[a-zA-Z0-9]+$/)
      if @api_client.config.client_side_validation && bg_id !~ pattern
        fail ArgumentError, "invalid value for 'bg_id' when calling BillingGroupsApi.billing_group_retrieve, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/billing_groups/{bg_id}'.sub('{' + 'bg_id' + '}', CGI.escape(bg_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BillingGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"BillingGroupsApi.billing_group_retrieve",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingGroupsApi#billing_group_retrieve\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # update
    # Updates all editable attributes of the billing_group with the given id.
    # @param bg_id [String] id of the billing_group
    # @param billing_group_editable [BillingGroupEditable] 
    # @param [Hash] opts the optional parameters
    # @return [BillingGroup]
    def update(bg_id, billing_group_editable, opts = {})
      data, _status_code, _headers = billing_group_update_with_http_info(bg_id, billing_group_editable, opts)
      data
    end

    # update
    # Updates all editable attributes of the billing_group with the given id.
    # @param bg_id [String] id of the billing_group
    # @param billing_group_editable [BillingGroupEditable] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BillingGroup, Integer, Hash)>] BillingGroup data, response status code and response headers
    def billing_group_update_with_http_info(bg_id, billing_group_editable, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingGroupsApi.billing_group_update ...'
      end
      # verify the required parameter 'bg_id' is set
      if @api_client.config.client_side_validation && bg_id.nil?
        fail ArgumentError, "Missing the required parameter 'bg_id' when calling BillingGroupsApi.billing_group_update"
      end
      pattern = Regexp.new(/^bg_[a-zA-Z0-9]+$/)
      if @api_client.config.client_side_validation && bg_id !~ pattern
        fail ArgumentError, "invalid value for 'bg_id' when calling BillingGroupsApi.billing_group_update, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'billing_group_editable' is set
      if @api_client.config.client_side_validation && billing_group_editable.nil?
        fail ArgumentError, "Missing the required parameter 'billing_group_editable' when calling BillingGroupsApi.billing_group_update"
      end
      # resource path
      local_var_path = '/billing_groups/{bg_id}'.sub('{' + 'bg_id' + '}', CGI.escape(bg_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(billing_group_editable)

      # return_type
      return_type = opts[:debug_return_type] || 'BillingGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"BillingGroupsApi.billing_group_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingGroupsApi#billing_group_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # list
    # Returns a list of your billing_groups. The billing_groups are returned sorted by creation date, with the most recently created billing_groups appearing first.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many results to return. (default to 10)
    # @option opts [Integer] :offset An integer that designates the offset at which to begin returning results. Defaults to 0. (default to 0)
    # @option opts [Array<String>] :include Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;. 
    # @option opts [Hash<String, Time>] :date_created Filter by date created.
    # @option opts [Hash<String, String>] :date_modified Filter by date modified.
    # @option opts [SortByDateModified] :sort_by_date_modified Sorts items by ascending or descending dates. Use either &#x60;date_created&#x60; or &#x60;date_modfied&#x60;, not both. 
    # @return [BillingGroupList]
    def list(opts = {})
      data, _status_code, _headers = billing_groups_list_with_http_info(opts)
      data
    end

    # list
    # Returns a list of your billing_groups. The billing_groups are returned sorted by creation date, with the most recently created billing_groups appearing first.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit How many results to return. (default to 10)
    # @option opts [Integer] :offset An integer that designates the offset at which to begin returning results. Defaults to 0. (default to 0)
    # @option opts [Array<String>] :include Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;. 
    # @option opts [Hash<String, Time>] :date_created Filter by date created.
    # @option opts [Hash<String, String>] :date_modified Filter by date modified.
    # @option opts [SortByDateModified] :sort_by_date_modified Sorts items by ascending or descending dates. Use either &#x60;date_created&#x60; or &#x60;date_modfied&#x60;, not both. 
    # @return [Array<(BillingGroupList, Integer, Hash)>] BillingGroupList data, response status code and response headers
    def billing_groups_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BillingGroupsApi.billing_groups_list ...'
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling BillingGroupsApi.billing_groups_list, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling BillingGroupsApi.billing_groups_list, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/billing_groups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'include'] = @api_client.build_collection_param(opts[:'include'], :multi) if !opts[:'include'].nil?
      query_params[:'date_created'] = opts[:'date_created'] if !opts[:'date_created'].nil?
      query_params[:'date_modified'] = opts[:'date_modified'] if !opts[:'date_modified'].nil?
      query_params[:'sort_by_date_modified'] = opts[:'sort_by_date_modified'] if !opts[:'sort_by_date_modified'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BillingGroupList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"BillingGroupsApi.billing_groups_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BillingGroupsApi#billing_groups_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
