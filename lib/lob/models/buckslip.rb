=begin
#Lob

#The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

The version of the OpenAPI document: 1.3.0
Contact: lob-openapi@lob.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'date'
require 'time'

module Lob
  class Buckslip
    # Unique identifier prefixed with `bck_`.
    attr_accessor :id

    # True if the buckslips should be auto-reordered.
    attr_accessor :auto_reorder

    # The number of buckslips to be reordered.
    attr_accessor :reorder_quantity

    # The threshold amount of the buckslip
    attr_accessor :threshold_amount

    # The signed link for the buckslip.
    attr_accessor :url

    # The raw URL of the buckslip.
    attr_accessor :raw_url

    # The original URL of the front template.
    attr_accessor :front_original_url

    # The original URL of the back template.
    attr_accessor :back_original_url

    attr_accessor :thumbnails

    # The available quantity of buckslips.
    attr_accessor :available_quantity

    # The allocated quantity of buckslips.
    attr_accessor :allocated_quantity

    # The onhand quantity of buckslips.
    attr_accessor :onhand_quantity

    # The pending quantity of buckslips.
    attr_accessor :pending_quantity

    # The sum of pending and onhand quantities of buckslips.
    attr_accessor :projected_quantity

    # An array of buckslip orders that are associated with the buckslip.
    attr_accessor :buckslip_orders

    attr_accessor :stock

    attr_accessor :weight

    attr_accessor :finish

    attr_accessor :status

    # object
    attr_accessor :object

    # Description of the buckslip.
    attr_accessor :description

    # The size of the buckslip
    attr_accessor :size

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'auto_reorder' => :'auto_reorder',
        :'reorder_quantity' => :'reorder_quantity',
        :'threshold_amount' => :'threshold_amount',
        :'url' => :'url',
        :'raw_url' => :'raw_url',
        :'front_original_url' => :'front_original_url',
        :'back_original_url' => :'back_original_url',
        :'thumbnails' => :'thumbnails',
        :'available_quantity' => :'available_quantity',
        :'allocated_quantity' => :'allocated_quantity',
        :'onhand_quantity' => :'onhand_quantity',
        :'pending_quantity' => :'pending_quantity',
        :'projected_quantity' => :'projected_quantity',
        :'buckslip_orders' => :'buckslip_orders',
        :'stock' => :'stock',
        :'weight' => :'weight',
        :'finish' => :'finish',
        :'status' => :'status',
        :'object' => :'object',
        :'description' => :'description',
        :'size' => :'size'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'auto_reorder' => :'Boolean',
        :'reorder_quantity' => :'Integer',
        :'threshold_amount' => :'Integer',
        :'url' => :'String',
        :'raw_url' => :'String',
        :'front_original_url' => :'String',
        :'back_original_url' => :'String',
        :'thumbnails' => :'Array<Thumbnail>',
        :'available_quantity' => :'Float',
        :'allocated_quantity' => :'Float',
        :'onhand_quantity' => :'Float',
        :'pending_quantity' => :'Float',
        :'projected_quantity' => :'Float',
        :'buckslip_orders' => :'Array<BuckslipOrder>',
        :'stock' => :'String',
        :'weight' => :'String',
        :'finish' => :'String',
        :'status' => :'String',
        :'object' => :'String',
        :'description' => :'String',
        :'size' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'reorder_quantity',
        :'description',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Lob::Buckslip` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Lob::Buckslip`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'auto_reorder')
        self.auto_reorder = attributes[:'auto_reorder']
      else
        self.auto_reorder = false
      end

      if attributes.key?(:'reorder_quantity')
        self.reorder_quantity = attributes[:'reorder_quantity']
      end

      if attributes.key?(:'threshold_amount')
        self.threshold_amount = attributes[:'threshold_amount']
      else
        self.threshold_amount = 0
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'raw_url')
        self.raw_url = attributes[:'raw_url']
      end

      if attributes.key?(:'front_original_url')
        self.front_original_url = attributes[:'front_original_url']
      end

      if attributes.key?(:'back_original_url')
        self.back_original_url = attributes[:'back_original_url']
      end

      if attributes.key?(:'thumbnails')
        if (value = attributes[:'thumbnails']).is_a?(Array)
          self.thumbnails = value
        end
      end

      if attributes.key?(:'available_quantity')
        self.available_quantity = attributes[:'available_quantity']
      else
        self.available_quantity = 0
      end

      if attributes.key?(:'allocated_quantity')
        self.allocated_quantity = attributes[:'allocated_quantity']
      else
        self.allocated_quantity = 0
      end

      if attributes.key?(:'onhand_quantity')
        self.onhand_quantity = attributes[:'onhand_quantity']
      else
        self.onhand_quantity = 0
      end

      if attributes.key?(:'pending_quantity')
        self.pending_quantity = attributes[:'pending_quantity']
      else
        self.pending_quantity = 0
      end

      if attributes.key?(:'projected_quantity')
        self.projected_quantity = attributes[:'projected_quantity']
      else
        self.projected_quantity = 0
      end

      if attributes.key?(:'buckslip_orders')
        if (value = attributes[:'buckslip_orders']).is_a?(Array)
          self.buckslip_orders = value
        end
      end

      if attributes.key?(:'stock')
        self.stock = attributes[:'stock']
      end

      if attributes.key?(:'weight')
        self.weight = attributes[:'weight']
      end

      if attributes.key?(:'finish')
        self.finish = attributes[:'finish']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'object')
        self.object = attributes[:'object']
      else
        self.object = 'buckslip'
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'size')
        self.size = attributes[:'size']
      else
        self.size = '8.75x3.75'
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      pattern = Regexp.new(/^bck_[a-zA-Z0-9]+$/)
      if @id !~ pattern
        invalid_properties.push("invalid value for \"id\", must conform to the pattern #{pattern}.")
      end

      if @auto_reorder.nil?
        invalid_properties.push('invalid value for "auto_reorder", auto_reorder cannot be nil.')
      end

      if @threshold_amount.nil?
        invalid_properties.push('invalid value for "threshold_amount", threshold_amount cannot be nil.')
      end

      if @url.nil?
        invalid_properties.push('invalid value for "url", url cannot be nil.')
      end

      if @url.to_s.length > 2083
        invalid_properties.push('invalid value for "url", the character length must be smaller than or equal to 2083.')
      end

      if @url.to_s.length < 1
        invalid_properties.push('invalid value for "url", the character length must be great than or equal to 1.')
      end

      if @raw_url.nil?
        invalid_properties.push('invalid value for "raw_url", raw_url cannot be nil.')
      end

      if @raw_url.to_s.length > 2083
        invalid_properties.push('invalid value for "raw_url", the character length must be smaller than or equal to 2083.')
      end

      if @raw_url.to_s.length < 1
        invalid_properties.push('invalid value for "raw_url", the character length must be great than or equal to 1.')
      end

      if @front_original_url.nil?
        invalid_properties.push('invalid value for "front_original_url", front_original_url cannot be nil.')
      end

      if @front_original_url.to_s.length > 2083
        invalid_properties.push('invalid value for "front_original_url", the character length must be smaller than or equal to 2083.')
      end

      if @front_original_url.to_s.length < 1
        invalid_properties.push('invalid value for "front_original_url", the character length must be great than or equal to 1.')
      end

      if @back_original_url.nil?
        invalid_properties.push('invalid value for "back_original_url", back_original_url cannot be nil.')
      end

      if @back_original_url.to_s.length > 2083
        invalid_properties.push('invalid value for "back_original_url", the character length must be smaller than or equal to 2083.')
      end

      if @back_original_url.to_s.length < 1
        invalid_properties.push('invalid value for "back_original_url", the character length must be great than or equal to 1.')
      end

      if @thumbnails.nil?
        invalid_properties.push('invalid value for "thumbnails", thumbnails cannot be nil.')
      end

      if @available_quantity.nil?
        invalid_properties.push('invalid value for "available_quantity", available_quantity cannot be nil.')
      end

      if @allocated_quantity.nil?
        invalid_properties.push('invalid value for "allocated_quantity", allocated_quantity cannot be nil.')
      end

      if @onhand_quantity.nil?
        invalid_properties.push('invalid value for "onhand_quantity", onhand_quantity cannot be nil.')
      end

      if @pending_quantity.nil?
        invalid_properties.push('invalid value for "pending_quantity", pending_quantity cannot be nil.')
      end

      if @projected_quantity.nil?
        invalid_properties.push('invalid value for "projected_quantity", projected_quantity cannot be nil.')
      end

      if @buckslip_orders.nil?
        invalid_properties.push('invalid value for "buckslip_orders", buckslip_orders cannot be nil.')
      end

      if @buckslip_orders.length < 0
        invalid_properties.push('invalid value for "buckslip_orders", number of items must be greater than or equal to 0.')
      end

      if @stock.nil?
        invalid_properties.push('invalid value for "stock", stock cannot be nil.')
      end

      if @weight.nil?
        invalid_properties.push('invalid value for "weight", weight cannot be nil.')
      end

      if @finish.nil?
        invalid_properties.push('invalid value for "finish", finish cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @object.nil?
        invalid_properties.push('invalid value for "object", object cannot be nil.')
      end

      if @description.to_s.length > 255
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 255.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @id !~ Regexp.new(/^bck_[a-zA-Z0-9]+$/)
      return false if @auto_reorder.nil?
      return false if @threshold_amount.nil?
      return false if @url.nil?
      return false if @url.to_s.length > 2083
      return false if @url.to_s.length < 1
      return false if @raw_url.nil?
      return false if @raw_url.to_s.length > 2083
      return false if @raw_url.to_s.length < 1
      return false if @front_original_url.nil?
      return false if @front_original_url.to_s.length > 2083
      return false if @front_original_url.to_s.length < 1
      return false if @back_original_url.nil?
      return false if @back_original_url.to_s.length > 2083
      return false if @back_original_url.to_s.length < 1
      return false if @thumbnails.nil?
      return false if @available_quantity.nil?
      return false if @allocated_quantity.nil?
      return false if @onhand_quantity.nil?
      return false if @pending_quantity.nil?
      return false if @projected_quantity.nil?
      return false if @buckslip_orders.nil?
      return false if @buckslip_orders.length < 0
      return false if @stock.nil?
      stock_validator = EnumAttributeValidator.new('String', ["text", "cover"])
      return false unless stock_validator.valid?(@stock)
      return false if @weight.nil?
      weight_validator = EnumAttributeValidator.new('String', ["80#"])
      return false unless weight_validator.valid?(@weight)
      return false if @finish.nil?
      finish_validator = EnumAttributeValidator.new('String', ["gloss", "matte"])
      return false unless finish_validator.valid?(@finish)
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('String', ["processed", "rendered"])
      return false unless status_validator.valid?(@status)
      return false if @object.nil?
      object_validator = EnumAttributeValidator.new('String', ["buckslip"])
      return false unless object_validator.valid?(@object)
      return false if @description.to_s.length > 255
      size_validator = EnumAttributeValidator.new('String', ["8.75x3.75"])
      return false unless size_validator.valid?(@size)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      pattern = Regexp.new(/^bck_[a-zA-Z0-9]+$/)
      if id !~ pattern
        fail ArgumentError, "invalid value for \"id\", must conform to the pattern #{pattern}."
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] url Value to be assigned
    def url=(url)
      if url.nil?
        fail ArgumentError, 'url cannot be nil'
      end

      if url.to_s.length > 2083
        fail ArgumentError, 'invalid value for "url", the character length must be smaller than or equal to 2083.'
      end

      if url.to_s.length < 1
        fail ArgumentError, 'invalid value for "url", the character length must be great than or equal to 1.'
      end

      @url = url
    end

    # Custom attribute writer method with validation
    # @param [Object] raw_url Value to be assigned
    def raw_url=(raw_url)
      if raw_url.nil?
        fail ArgumentError, 'raw_url cannot be nil'
      end

      if raw_url.to_s.length > 2083
        fail ArgumentError, 'invalid value for "raw_url", the character length must be smaller than or equal to 2083.'
      end

      if raw_url.to_s.length < 1
        fail ArgumentError, 'invalid value for "raw_url", the character length must be great than or equal to 1.'
      end

      @raw_url = raw_url
    end

    # Custom attribute writer method with validation
    # @param [Object] front_original_url Value to be assigned
    def front_original_url=(front_original_url)
      if front_original_url.nil?
        fail ArgumentError, 'front_original_url cannot be nil'
      end

      if front_original_url.to_s.length > 2083
        fail ArgumentError, 'invalid value for "front_original_url", the character length must be smaller than or equal to 2083.'
      end

      if front_original_url.to_s.length < 1
        fail ArgumentError, 'invalid value for "front_original_url", the character length must be great than or equal to 1.'
      end

      @front_original_url = front_original_url
    end

    # Custom attribute writer method with validation
    # @param [Object] back_original_url Value to be assigned
    def back_original_url=(back_original_url)
      if back_original_url.nil?
        fail ArgumentError, 'back_original_url cannot be nil'
      end

      if back_original_url.to_s.length > 2083
        fail ArgumentError, 'invalid value for "back_original_url", the character length must be smaller than or equal to 2083.'
      end

      if back_original_url.to_s.length < 1
        fail ArgumentError, 'invalid value for "back_original_url", the character length must be great than or equal to 1.'
      end

      @back_original_url = back_original_url
    end

    # Custom attribute writer method with validation
    # @param [Object] buckslip_orders Value to be assigned
    def buckslip_orders=(buckslip_orders)
      if buckslip_orders.nil?
        fail ArgumentError, 'buckslip_orders cannot be nil'
      end

      if buckslip_orders.length < 0
        fail ArgumentError, 'invalid value for "buckslip_orders", number of items must be greater than or equal to 0.'
      end

      @buckslip_orders = buckslip_orders
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] stock Object to be assigned
    def stock=(stock)
      validator = EnumAttributeValidator.new('String', ["text", "cover"])
      unless validator.valid?(stock)
        fail ArgumentError, "invalid value for \"stock\", must be one of #{validator.allowable_values}."
      end
      @stock = stock
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] weight Object to be assigned
    def weight=(weight)
      validator = EnumAttributeValidator.new('String', ["80#"])
      unless validator.valid?(weight)
        fail ArgumentError, "invalid value for \"weight\", must be one of #{validator.allowable_values}."
      end
      @weight = weight
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] finish Object to be assigned
    def finish=(finish)
      validator = EnumAttributeValidator.new('String', ["gloss", "matte"])
      unless validator.valid?(finish)
        fail ArgumentError, "invalid value for \"finish\", must be one of #{validator.allowable_values}."
      end
      @finish = finish
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["processed", "rendered"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] object Object to be assigned
    def object=(object)
      validator = EnumAttributeValidator.new('String', ["buckslip"])
      unless validator.valid?(object)
        fail ArgumentError, "invalid value for \"object\", must be one of #{validator.allowable_values}."
      end
      @object = object
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if description.to_s.length > 255
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 255.'
      end

      @description = description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] size Object to be assigned
    def size=(size)
      validator = EnumAttributeValidator.new('String', ["8.75x3.75"])
      unless validator.valid?(size)
        fail ArgumentError, "invalid value for \"size\", must be one of #{validator.allowable_values}."
      end
      @size = size
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          auto_reorder == o.auto_reorder &&
          reorder_quantity == o.reorder_quantity &&
          threshold_amount == o.threshold_amount &&
          url == o.url &&
          raw_url == o.raw_url &&
          front_original_url == o.front_original_url &&
          back_original_url == o.back_original_url &&
          thumbnails == o.thumbnails &&
          available_quantity == o.available_quantity &&
          allocated_quantity == o.allocated_quantity &&
          onhand_quantity == o.onhand_quantity &&
          pending_quantity == o.pending_quantity &&
          projected_quantity == o.projected_quantity &&
          buckslip_orders == o.buckslip_orders &&
          stock == o.stock &&
          weight == o.weight &&
          finish == o.finish &&
          status == o.status &&
          object == o.object &&
          description == o.description &&
          size == o.size
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, auto_reorder, reorder_quantity, threshold_amount, url, raw_url, front_original_url, back_original_url, thumbnails, available_quantity, allocated_quantity, onhand_quantity, pending_quantity, projected_quantity, buckslip_orders, stock, weight, finish, status, object, description, size].hash
    end


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil) # // guardrails-disable-line
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) }) # // guardrails-disable-line
          end
        elsif !attributes[self.class.attribute_map[key]].nil? && type.kind_of?(Array)
          for base_type in type do
            res = _deserialize(base_type, attributes[self.class.attribute_map[key]])
            if !res.nil?
              self.send("#{key}=", res) # // guardrails-disable-line
              break
            end
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]])) # // guardrails-disable-line
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Lob.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr) # // guardrails-disable-line
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
