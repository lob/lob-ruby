=begin
#Lob

#The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

The version of the OpenAPI document: 1.3.0
Contact: lob-openapi@lob.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'date'
require 'time'

module Lob
  class AddressDomesticExpanded
    # The building number, street name, street suffix, and any street directionals. For US addresses, the max length is 64 characters.
    attr_accessor :address_line1

    # The suite or apartment number of the recipient address, if applicable. For US addresses, the max length is 64 characters.
    attr_accessor :address_line2

    attr_accessor :address_city

    attr_accessor :address_state

    # Optional postal code. For US addresses, must be either 5 or 9 digits.
    attr_accessor :address_zip

    # An internal description that identifies this resource. Must be no longer than 255 characters. 
    attr_accessor :description

    # Either `name` or `company` is required, you may also add both. Must be no longer than 40 characters. If both `name` and `company` are provided, they will be printed on two separate lines above the rest of the address. 
    attr_accessor :name

    # Either `name` or `company` is required, you may also add both.
    attr_accessor :company

    # Must be no longer than 40 characters.
    attr_accessor :phone

    # Must be no longer than 100 characters.
    attr_accessor :email

    # The country associated with this address.
    attr_accessor :address_country

    # Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters `\"` and `\\`. i.e. '{\"customer_id\" : \"NEWYORK2015\"}' Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.
    attr_accessor :metadata

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'address_line1' => :'address_line1',
        :'address_line2' => :'address_line2',
        :'address_city' => :'address_city',
        :'address_state' => :'address_state',
        :'address_zip' => :'address_zip',
        :'description' => :'description',
        :'name' => :'name',
        :'company' => :'company',
        :'phone' => :'phone',
        :'email' => :'email',
        :'address_country' => :'address_country',
        :'metadata' => :'metadata'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'address_line1' => :'String',
        :'address_line2' => :'String',
        :'address_city' => :'String',
        :'address_state' => :'String',
        :'address_zip' => :'String',
        :'description' => :'String',
        :'name' => :'String',
        :'company' => :'String',
        :'phone' => :'String',
        :'email' => :'String',
        :'address_country' => :'String',
        :'metadata' => :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'address_line2',
        :'address_city',
        :'address_state',
        :'address_zip',
        :'description',
        :'name',
        :'company',
        :'phone',
        :'email',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Lob::AddressDomesticExpanded` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Lob::AddressDomesticExpanded`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'address_line1')
        self.address_line1 = attributes[:'address_line1']
      end

      if attributes.key?(:'address_line2')
        self.address_line2 = attributes[:'address_line2']
      end

      if attributes.key?(:'address_city')
        self.address_city = attributes[:'address_city']
      end

      if attributes.key?(:'address_state')
        self.address_state = attributes[:'address_state']
      end

      if attributes.key?(:'address_zip')
        self.address_zip = attributes[:'address_zip']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'company')
        self.company = attributes[:'company']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'address_country')
        self.address_country = attributes[:'address_country']
      end

      if attributes.key?(:'metadata')
        if (value = attributes[:'metadata']).is_a?(Hash)
          self.metadata = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@address_line1.nil? && @address_line1.to_s.length > 200
        invalid_properties.push('invalid value for "address_line1", the character length must be smaller than or equal to 200.')
      end

      if !@address_line2.nil? && @address_line2.to_s.length > 200
        invalid_properties.push('invalid value for "address_line2", the character length must be smaller than or equal to 200.')
      end

      if !@address_city.nil? && @address_city.to_s.length > 200
        invalid_properties.push('invalid value for "address_city", the character length must be smaller than or equal to 200.')
      end

      if !@address_state.nil? && @address_state.to_s.length > 200
        invalid_properties.push('invalid value for "address_state", the character length must be smaller than or equal to 200.')
      end

      if !@address_zip.nil? && @address_zip.to_s.length > 40
        invalid_properties.push('invalid value for "address_zip", the character length must be smaller than or equal to 40.')
      end

      if !@description.nil? && @description.to_s.length > 255
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 255.')
      end

      if !@name.nil? && @name.to_s.length > 40
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 40.')
      end

      if !@company.nil? && @company.to_s.length > 40
        invalid_properties.push('invalid value for "company", the character length must be smaller than or equal to 40.')
      end

      if !@phone.nil? && @phone.to_s.length > 40
        invalid_properties.push('invalid value for "phone", the character length must be smaller than or equal to 40.')
      end

      if !@email.nil? && @email.to_s.length > 100
        invalid_properties.push('invalid value for "email", the character length must be smaller than or equal to 100.')
      end

      pattern = Regexp.new(/UNITED STATES/)
      if !@address_country.nil? && @address_country !~ pattern
        invalid_properties.push("invalid value for \"address_country\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@address_line1.nil? && @address_line1.to_s.length > 200
      return false if !@address_line2.nil? && @address_line2.to_s.length > 200
      return false if !@address_city.nil? && @address_city.to_s.length > 200
      return false if !@address_state.nil? && @address_state.to_s.length > 200
      return false if !@address_zip.nil? && @address_zip.to_s.length > 40
      return false if !@description.nil? && @description.to_s.length > 255
      return false if !@name.nil? && @name.to_s.length > 40
      return false if !@company.nil? && @company.to_s.length > 40
      return false if !@phone.nil? && @phone.to_s.length > 40
      return false if !@email.nil? && @email.to_s.length > 100
      return false if !@address_country.nil? && @address_country !~ Regexp.new(/UNITED STATES/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] address_line1 Value to be assigned
    def address_line1=(address_line1)
      if !address_line1.nil? && address_line1.to_s.length > 200
        fail ArgumentError, 'invalid value for "address_line1", the character length must be smaller than or equal to 200.'
      end

      @address_line1 = address_line1
    end

    # Custom attribute writer method with validation
    # @param [Object] address_line2 Value to be assigned
    def address_line2=(address_line2)
      if !address_line2.nil? && address_line2.to_s.length > 200
        fail ArgumentError, 'invalid value for "address_line2", the character length must be smaller than or equal to 200.'
      end

      @address_line2 = address_line2
    end

    # Custom attribute writer method with validation
    # @param [Object] address_city Value to be assigned
    def address_city=(address_city)
      if !address_city.nil? && address_city.to_s.length > 200
        fail ArgumentError, 'invalid value for "address_city", the character length must be smaller than or equal to 200.'
      end

      @address_city = address_city
    end

    # Custom attribute writer method with validation
    # @param [Object] address_state Value to be assigned
    def address_state=(address_state)
      if !address_state.nil? && address_state.to_s.length > 200
        fail ArgumentError, 'invalid value for "address_state", the character length must be smaller than or equal to 200.'
      end

      @address_state = address_state
    end

    # Custom attribute writer method with validation
    # @param [Object] address_zip Value to be assigned
    def address_zip=(address_zip)
      if !address_zip.nil? && address_zip.to_s.length > 40
        fail ArgumentError, 'invalid value for "address_zip", the character length must be smaller than or equal to 40.'
      end

      @address_zip = address_zip
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 255
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 255.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && name.to_s.length > 40
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 40.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] company Value to be assigned
    def company=(company)
      if !company.nil? && company.to_s.length > 40
        fail ArgumentError, 'invalid value for "company", the character length must be smaller than or equal to 40.'
      end

      @company = company
    end

    # Custom attribute writer method with validation
    # @param [Object] phone Value to be assigned
    def phone=(phone)
      if !phone.nil? && phone.to_s.length > 40
        fail ArgumentError, 'invalid value for "phone", the character length must be smaller than or equal to 40.'
      end

      @phone = phone
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if !email.nil? && email.to_s.length > 100
        fail ArgumentError, 'invalid value for "email", the character length must be smaller than or equal to 100.'
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] address_country Value to be assigned
    def address_country=(address_country)
      pattern = Regexp.new(/UNITED STATES/)
      if !address_country.nil? && address_country !~ pattern
        fail ArgumentError, "invalid value for \"address_country\", must conform to the pattern #{pattern}."
      end

      @address_country = address_country
    end

    # Custom attribute writer method with validation
    # @param [Object] metadata Value to be assigned
    def metadata=(metadata)
      @metadata = metadata
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          address_line1 == o.address_line1 &&
          address_line2 == o.address_line2 &&
          address_city == o.address_city &&
          address_state == o.address_state &&
          address_zip == o.address_zip &&
          description == o.description &&
          name == o.name &&
          company == o.company &&
          phone == o.phone &&
          email == o.email &&
          address_country == o.address_country &&
          metadata == o.metadata
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [address_line1, address_line2, address_city, address_state, address_zip, description, name, company, phone, email, address_country, metadata].hash
    end


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil) # // guardrails-disable-line
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) }) # // guardrails-disable-line
          end
        elsif !attributes[self.class.attribute_map[key]].nil? && type.kind_of?(Array)
          for base_type in type do
            res = _deserialize(base_type, attributes[self.class.attribute_map[key]])
            if !res.nil?
              self.send("#{key}=", res) # // guardrails-disable-line
              break
            end
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]])) # // guardrails-disable-line
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Lob.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr) # // guardrails-disable-line
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
