=begin
#Lob

#The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

The version of the OpenAPI document: 1.3.0
Contact: lob-openapi@lob.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'spec_helper'
require 'json'

# Unit tests for Lob::TemplatesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'TemplatesApi' do
  before do
    # run before each test
    @api_instance = Lob::TemplatesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TemplatesApi' do
    it 'should create an instance of TemplatesApi' do
      expect(@api_instance).to be_instance_of(Lob::TemplatesApi)
    end
  end

  # unit tests for create_template
  # create
  # Creates a new template for use with the Print &amp; Mail API. In Live mode, you can only have as many non-deleted templates as allotted in your current [Print &amp; Mail Edition](https://dashboard.lob.com/#/settings/editions). If you attempt to create a template past your limit, you will receive a &#x60;403&#x60; error. There is no limit in Test mode.
  # @param template_writable 
  # @param [Hash] opts the optional parameters
  # @return [Template]
  describe 'create_template test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for template_delete
  # delete
  # Permanently deletes a template.
  # @param tmpl_id id of the template
  # @param [Hash] opts the optional parameters
  # @return [TemplateDeletion]
  describe 'template_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for template_retrieve
  # get
  # Retrieves the details of an existing template.
  # @param tmpl_id id of the template
  # @param [Hash] opts the optional parameters
  # @return [Template]
  describe 'template_retrieve test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for template_update
  # update
  # Updates the description and/or published version of the template with the given id.
  # @param tmpl_id id of the template
  # @param template_update 
  # @param [Hash] opts the optional parameters
  # @return [Template]
  describe 'template_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for templates_list
  # list
  # Returns a list of your templates. The templates are returned sorted by creation date, with the most recently created templates appearing first.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit How many results to return.
  # @option opts [String] :before A reference to a list entry used for paginating to the previous set of entries. This field is pre-populated in the &#x60;previous_url&#x60; field in the return response. 
  # @option opts [String] :after A reference to a list entry used for paginating to the next set of entries. This field is pre-populated in the &#x60;next_url&#x60; field in the return response. 
  # @option opts [Array<String>] :include Request that the response include the total count by specifying &#x60;include[]&#x3D;total_count&#x60;. 
  # @option opts [Hash<String, Time>] :date_created Filter by date created.
  # @option opts [Hash<String, String>] :metadata Filter by metadata key-value pair&#x60;.
  # @return [TemplateList]
  describe 'templates_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
