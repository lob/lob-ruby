=begin
#Lob

#The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 

The version of the OpenAPI document: 1.3.0
Contact: lob-openapi@lob.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'spec_helper'
require 'json'

# Unit tests for Lob::UploadsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'UploadsApi' do
  before do
    # run before each test
    @api_instance = Lob::UploadsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UploadsApi' do
    it 'should create an instance of UploadsApi' do
      expect(@api_instance).to be_instance_of(Lob::UploadsApi)
    end
  end

  # unit tests for export_retrieve
  # get_export
  # Retrieves the details of an existing export. You need only supply the unique export identifier that was returned upon export creation. If you try retrieving an export immediately after creating one (i.e., before we&#39;re done processing the export), you will get back an export object with &#x60;state &#x3D; in_progress&#x60;.
  # @param upl_id ID of the upload
  # @param ex_id ID of the export
  # @param [Hash] opts the optional parameters
  # @return [Export]
  describe 'export_retrieve test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get
  # get
  # Retrieves the details of an existing upload. You need only supply the unique upload identifier that was returned upon upload creation.
  # @param upl_id id of the upload
  # @param [Hash] opts the optional parameters
  # @return [Upload]
  describe 'get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_create
  # create
  # Creates a new upload with the provided properties.
  # @param upload_writable 
  # @param [Hash] opts the optional parameters
  # @return [Upload]
  describe 'upload_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_delete
  # delete
  # Delete an existing upload. You need only supply the unique identifier that was returned upon upload creation.
  # @param upl_id id of the upload
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'upload_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_export_create
  # create_export
  # Campaign Exports can help you understand exactly which records in a campaign could not be created. By initiating and retrieving an export, you will get row-by-row errors for your campaign. For a step-by-step walkthrough of creating a campaign and exporting failures, see our [Campaigns Guide](https://help.lob.com/best-practices/launching-your-first-campaign).  Create an export file associated with an upload.
  # @param upl_id ID of the upload
  # @param export_model 
  # @param [Hash] opts the optional parameters
  # @return [UploadCreateExport]
  describe 'upload_export_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_file_create
  # upload_file
  # Upload an [audience file](https://help.lob.com/best-practices/campaign-audience-guide) and associate it with an upload.
  # @param upl_id ID of the upload
  # @param file 
  # @param [Hash] opts the optional parameters
  # @return [UploadFile]
  describe 'upload_file_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_update
  # update
  # Update the details of an existing upload. You need only supply the unique identifier that was returned upon upload creation.
  # @param upl_id id of the upload
  # @param upload_updatable 
  # @param [Hash] opts the optional parameters
  # @return [Upload]
  describe 'upload_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for uploads_list
  # list
  # Returns a list of your uploads. Optionally, filter uploads by campaign.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :campaign_id id of the campaign
  # @return [Array<Upload>]
  describe 'uploads_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
